{
  "name": "spm",
  "version": "0.9.8",
  "description": "A Package Manager for SeaJS",
  "homepage": "https://github.com/seajs/spm",
  "keywords": [
    "seajs",
    "module",
    "package",
    "optimization",
    "tool"
  ],
  "author": {
    "name": "Frank Wang",
    "email": "lifesinger@gmail.com"
  },
  "contributors": [
    {
      "name": "Frank Xu",
      "email": "yyfrankyy@gmail.com"
    },
    {
      "name": "kangpangpang",
      "email": "kangpangpang@gmail.com"
    }
  ],
  "engines": {
    "node": ">= 0.8.1"
  },
  "dependencies": {
    "semver": "~1.0.14",
    "uglify-js": ">= 1.1.1",
    "seajs": ">= 1.1.0",
    "async": "0.1.22",
    "tar": "0.1.13",
    "fstream": "0.1.18",
    "fstream-ignore": "0.0.5",
    "inherits": "1.0.0",
    "wrench": "1.3.9",
    "request": "2.9.203",
    "mime": ">=1.2.7",
    "optimist": "0.3.4",
    "coffee-script": ">=1.3.3",
    "jasmine-node": ">=1.0.26",
    "jshint": ">=0.7.3",
    "less": ">=1.3.0",
    "glob": "3.1.12"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/seajs/spm.git"
  },
  "main": "./lib/spm.js",
  "bin": {
    "spm": "./bin/spm"
  },
  "scripts": {
    "test": "node test/"
  },
  "preferGlobal": true,
  "readme": "# Static Package Manager - 简单、放心的包管理工具\n\n\n## 安装\n\n首先需要安装 node 和 npm: http://nodejs.org/#download\n\n然后有两种安装方式:\n\n### 通过 npm\n\n```\n$ sudo npm install spm -g\n```\n\n### 通过源码\n\n```\n$ git clone https://github.com/seajs/spm.git\n```\n```\n$ cd spm\n$ sudo npm install -g\n```\n\n\n## SPM 概要\n\n目前我们的打包是基于配置文件，而且对模块的目录结构也有一定的要求，所以需要先了解下基本的目录结构和典型的配置文件。\n\n\n### 目录结构约定\n\n```\ndist/\n    example-debug.js\n    example.js\nexamples/\nsrc/\n    example.js\ntests/\npackage.json\nREADME.md\n```\n\n其中 **dist** 目录存放的是我们打包好的模块，也就是最终上线使用的模块文件。\n\n\n### 典型配置文件\n\n```\n{\n    \"name\": \"example\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": {\n        \"$\": \"$\",\n        \"handlebars\": \"1.0.0\",\n        \"base\": \"#base/0.9.16/base\"\n    },\n    \"output\": {\n        \"name.js\": \".\",\n        \"name2.js\": ['n1.js', 'n2.js']\n    }\n}\n```\n\n### dependencies 相关依赖解析\n\n#### 相关写法\n\n1. spm对于这种相等的模块，spm将不作处理，最终**$**的解析将有页面来决定.\n2. 这种是```handlebars/1.0.0/handlebars```的一种简化形式\n3. 是我们的标准配置.\n\n#### 依赖查找\n由于打包的时候我们需要计算依赖关系，所以我们根据用户配置的依赖需要找到具体的模块，我们目前是通过源来完成的，对于一些标准模块\n我们会提供统一的源服务，而对于用户的一些私有模块，我们也提供了命令可以方便用户快速的搭建自己的私有源服务.后面也会有相关**源**的介绍.\n\n### outout 模块输出配置.\n目前支持多种写法，最常用的就是上面两种:\n\n1. **\".\"** 会产生合并，其中会把name.js这个模块所有依赖的相对模块合并成一个模块**name.js**输出.\n2. 也是合并，不过是按照用户数组定义的顺序进行文件合并.\n\n总之SPM 目前说简单点就是根据模块的配置文件，然后计算模块的依赖，并替换相关依赖，并把需要的文件合并起来，然后输出标准的CMD模块. \n\n对于配置文件更详细的内容可以参看下面两个内容:\n\n[package, sources and spm](https://github.com/seajs/spm/issues/148)\n\n[配置文件详情](https://github.com/seajs/spm/wiki/package.json) \n\n对于具体的例子，可以参考我们已经开放出去的模块:\n\n[aralejs](https://github.com/aralejs)\n\nSPM 相关命令\n---\n目前我们的命令大概可以分为两类.\n\n### 模块打包\n\n#### spm build [options]\n\n根据package.json的配置打包模块并输出到**dist**目录:\n\n    $ spm build\n其中有下面相关设置:\n\n    -compiler=closure // 使用google closure compile 进行压缩\n\n    -v --verbose // 打印debug信息, 方便调试\n\n#### spm upload [options]\n\n打包模块(build)，并把打包好后的dist目录的内容按照我们的定义上传到**源服务中** 方便其他人使用.\n\n    $ spm upload \n\n其中**build**的参数也都适用，有一个新增加的：\n    \n    --only // 只进行上传，不会执行build操作.\n\n#### spm deploy [options]\n\n打包模块，并上传源服务，而且根据用户配置的远程服务器信息，可以把dist下面的内容**scp**到远程服务器.\n具体的配置信息参看:\n\n[spm deploy 基本介绍](https://github.com/seajs/spm/issues/173)\n\n[spm deploy 相关讨论](https://github.com/seajs/spm/issues/181)\n\n其中参数和upload的一致.\n\n\n### 工具辅助\n\n#### spm install [options] name[@version]\n\n获取所有的 seajs 兼容新模块到当前目录.\n\n    $ mkdir libs\n    $ cd libs\n    $ spm install all\n\n也可以获取指定模块:\n\n    $ spm install jquery@1.7.2\n\n查看更多详情:\n\n    $ spm help install\n\n#### spm init\n\n创建一个标准模块:\n\n    $ mkdir module\n    $ cd module\n    $ spm init\n\n可指定模块的 root，这个配置可查看 [package.json](https://github.com/seajs/spm/wiki/package.json)\n\n    $ spm init -r alipay\n\n#### spm transport [--force] transport.js\n\n你可以通过 `transport` 去包装一些非标准模块:\n\n    $ cd path/to/modules\n    $ mkdir xxx\n    $ cp jquery/transport.js xxx/\n    $ vi xxx/transport.js  # modify it\n    $ spm transport xxx/transport.js\n\n### spm server [options] \n\n在当前目录启用源服务， 端口为 8000\n    \n    $ spm server -p 8000\n\n这样使用者可以在内网部署此服务，可以把模块部署到此服务，其他用户也可以从这个服务获取里面的模块.\n\n如果一个服务想对多个系统(也就是模块配置有不同的root)提供服务的话\n\n    $ spm server -p 8001 --mapping\n\n\n\n",
  "_id": "spm@0.9.8",
  "_from": "spm"
}
